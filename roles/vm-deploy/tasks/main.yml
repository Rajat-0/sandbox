---
# tasks file for vm-deploy
#- name: Prepair localhost for running os_server module or creating vm on openstack using ansible
#  command: pip install shade
- name: Refresh inventory to ensure new instaces exist in inventory
  meta: refresh_inventory

- include: vm_create.yaml

- os_floating_ip:
    state: present
    reuse: yes
    server: "{{stuff.openstack.vm_name_prefix}}{{ item }}"
    network: "{{ stuff.openstack.external_network}}"
    wait: True
  with_sequence:
    count={{ stuff.openstack.count }}
  register: openstackfip

- name: Wait for SSH on the Instance
  command: >
    ssh -oBatchMode=yes -oStrictHostKeyChecking=no -i {{ stuff.openstack.key_path }}
    ubuntu@{{item.floating_ip.floating_ip_address}} true
  with_items: "{{ openstackfip.results }}"
  register: result
  until: result|success
  retries: 100
  delay: 2
  when: stuff.base_distro == 'ubuntu'

- name: Wait for SSH on the Instance
  command: >
    ssh -oBatchMode=yes -oStrictHostKeyChecking=no -i {{ stuff.openstack.key_path }}
    centos@{{item.floating_ip.floating_ip_address}} true
  with_items: "{{ openstackfip.results }}"
  register: result
  until: result|success
  retries: 100
  delay: 2
  when: stuff.base_distro == 'centos'

- include: vm_create.yaml

- name: add_host to run time inventory for master group
  add_host: name={{ item.server.public_v4 }}
            groups=master
            instance_name={{ item.server.name }}
            ansible_ssh_user=centos
            ansible_become=True
            ansible_become_user=root
            ansible_private_key_file={{ stuff.openstack.key_path}}
  with_items: "{{ openstackvmcreate.results[:1] }}"
  when:
    - stuff.openstack.count > 1
    - stuff.base_distro == 'centos'

- name: add_host to run time inventory for kubernetes group
  add_host: name={{ item.server.public_v4 }}
            groups=kubernetes
            instance_name={{ item.server.name }}
            ansible_ssh_user=centos
            ansible_become=True
            ansible_become_user=root
            ansible_private_key_file={{ stuff.openstack.key_path}}
  with_items: "{{ openstackvmcreate.results }}"
  when:
    - stuff.openstack.count > 1
    - stuff.base_distro == 'centos'


- name: add_host to run time inventory for worker group
  add_host: name={{ item.server.public_v4 }}
            groups=worker
            instance_name={{ item.server.name }}
            ansible_ssh_user=centos
            ansible_become=True
            ansible_become_user=root
            ansible_private_key_file={{ stuff.openstack.key_path}}
  with_items: "{{ openstackvmcreate.results[1:] }}"
  when:
    - stuff.openstack.count > 1
    - stuff.base_distro == 'centos'


- name: if count is 1 than add that host to all groups
  add_host:
    name: "{{ item.server.public_v4 }}"
    groups:
      - kubernetes
      - master
    instance_name: "{{ item.server.name }}"
    ansible_ssh_user: centos
    ansible_become: True
    ansible_become_user: root
    ansible_private_key_file: "{{ stuff.openstack.key_path}}"
  with_items: "{{ openstackvmcreate.results }}"
  when:
    - stuff.openstack.count == 1
    - stuff.base_distro == 'centos'

- name: add_host to run time inventory for master group
  add_host: name={{ item.server.public_v4 }}
            groups=master
            instance_name={{ item.server.name }}
            ansible_ssh_user=ubuntu
            ansible_become=True
            ansible_become_user=root
            ansible_python_interpreter=/usr/bin/python3
            ansible_private_key_file={{ stuff.openstack.key_path}}
  with_items: "{{ openstackvmcreate.results[:1] }}"
  when:
    - stuff.openstack.count > 1
    - stuff.base_distro == 'ubuntu'

- name: add_host to run time inventory for kubernetes group
  add_host: name={{ item.server.public_v4 }}
            groups=kubernetes
            instance_name={{ item.server.name }}
            ansible_ssh_user=ubuntu
            ansible_become=True
            ansible_become_user=root
            ansible_python_interpreter=/usr/bin/python3
            ansible_private_key_file={{ stuff.openstack.key_path}}
  with_items: "{{ openstackvmcreate.results }}"
  when:
    - stuff.openstack.count > 1
    - stuff.base_distro == 'ubuntu'


- name: add_host to run time inventory for worker group
  add_host: name={{ item.server.public_v4 }}
            groups=worker
            instance_name={{ item.server.name }}
            ansible_ssh_user=ubuntu
            ansible_become=True
            ansible_become_user=root
            ansible_python_interpreter=/usr/bin/python3
            ansible_private_key_file={{ stuff.openstack.key_path}}
  with_items: "{{ openstackvmcreate.results[1:] }}"
  when:
    - stuff.openstack.count > 1
    - stuff.base_distro == 'ubuntu'


- name: if count is 1 than add that host to all groups
  add_host:
    name: "{{ item.server.public_v4 }}"
    groups:
      - kubernetes
      - master
    instance_name: "{{ item.server.name }}"
    ansible_ssh_user: ubuntu
    ansible_become: True
    ansible_become_user: root
    ansible_python_interpreter: /usr/bin/python3
    ansible_private_key_file: "{{ stuff.openstack.key_path}}"
  with_items: "{{ openstackvmcreate.results }}"
  when:
    - stuff.openstack.count == 1
    - stuff.base_distro == 'ubuntu'

- name: Wait for SSH on the Instance
  command: >
    ssh -oBatchMode=yes -oStrictHostKeyChecking=no -i {{ stuff.openstack.key_path }}
    centos@{{groups['kubernetes'][-1]}} true
  register: result
  until: result|success
  retries: 100
  delay: 3
  when:
    - stuff.base_distro == 'centos'

- name: Wait for SSH on the Instance
  command: >
    ssh -oBatchMode=yes -oStrictHostKeyChecking=no -i {{ stuff.openstack.key_path }}
    ubuntu@{{groups['kubernetes'][-1]}} true
  register: result
  until: result|success
  retries: 100
  delay: 3
  when:
    - stuff.base_distro == 'ubuntu'